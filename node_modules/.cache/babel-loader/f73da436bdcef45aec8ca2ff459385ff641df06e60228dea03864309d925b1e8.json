{"ast":null,"code":"var _s = $RefreshSig$();\nimport actions from \"./actions\";\nimport { DataService } from \"../../config/dataservice/Dataservice\";\nimport { API } from \"../../config/api\";\nimport { Alert } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nconst {\n  getRepositoryData\n} = actions;\nexport const getRepository = async () => {\n  _s();\n  const dispatch = useDispatch();\n  const perPage = 10; // Number of items per page\n  let page = 1; // Start from the first page\n\n  while (true) {\n    try {\n      const queryString = `?q=created:>2017-10-22&page=${page}`;\n      const getData = await DataService.get(API.repos.get + queryString);\n      if (!getData.data.error) {\n        if (getData.data.items.length === 0) {\n          // No more data, exit the loop\n          break;\n        }\n        // Dispatch the fetched data to your Redux store\n        dispatch(getRepositoryData(getData.data));\n\n        // Move to the next page\n        page++;\n      } else {\n        // Handle error, maybe dispatch an action to update the state with an error message\n        // <Alert severity=\"error\">{getData.data.message}</Alert>\n        break;\n      }\n    } catch (error) {\n      // Handle error, maybe dispatch an action to update the state with an error message\n      // <Alert severity=\"error\">{error.message}</Alert>\n      break;\n    }\n  }\n};\n_s(getRepository, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["actions","DataService","API","Alert","useDispatch","getRepositoryData","getRepository","_s","dispatch","perPage","page","queryString","getData","get","repos","data","error","items","length"],"sources":["D:/React-js-prac-Hritik/my-app/src/redux/repos/actioncCreator.js"],"sourcesContent":["import actions from \"./actions\";\r\nimport { DataService } from \"../../config/dataservice/Dataservice\";\r\nimport { API } from \"../../config/api\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst {getRepositoryData}=actions;\r\nexport const getRepository = async () => {\r\n  const dispatch=useDispatch()\r\n  const perPage = 10; // Number of items per page\r\n  let page = 1; // Start from the first page\r\n\r\n  while (true) {\r\n    try {\r\n      const queryString = `?q=created:>2017-10-22&page=${page}`;\r\n      const getData = await DataService.get(API.repos.get + queryString);\r\n\r\n      if (!getData.data.error) {\r\n        if (getData.data.items.length === 0) {\r\n          // No more data, exit the loop\r\n          break;\r\n        }\r\n        // Dispatch the fetched data to your Redux store\r\n        dispatch(getRepositoryData(getData.data));\r\n\r\n        // Move to the next page\r\n        page++;\r\n      } else {\r\n        // Handle error, maybe dispatch an action to update the state with an error message\r\n        // <Alert severity=\"error\">{getData.data.message}</Alert>\r\n        break;\r\n      }\r\n    } catch (error) {\r\n      // Handle error, maybe dispatch an action to update the state with an error message\r\n      // <Alert severity=\"error\">{error.message}</Alert>\r\n      break;\r\n    }\r\n  }\r\n};\r\n"],"mappings":";AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,WAAW,QAAQ,sCAAsC;AAClE,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,WAAW,QAAQ,aAAa;AAEzC,MAAM;EAACC;AAAiB,CAAC,GAACL,OAAO;AACjC,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAACJ,WAAW,CAAC,CAAC;EAC5B,MAAMK,OAAO,GAAG,EAAE,CAAC,CAAC;EACpB,IAAIC,IAAI,GAAG,CAAC,CAAC,CAAC;;EAEd,OAAO,IAAI,EAAE;IACX,IAAI;MACF,MAAMC,WAAW,GAAI,+BAA8BD,IAAK,EAAC;MACzD,MAAME,OAAO,GAAG,MAAMX,WAAW,CAACY,GAAG,CAACX,GAAG,CAACY,KAAK,CAACD,GAAG,GAAGF,WAAW,CAAC;MAElE,IAAI,CAACC,OAAO,CAACG,IAAI,CAACC,KAAK,EAAE;QACvB,IAAIJ,OAAO,CAACG,IAAI,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;UACnC;UACA;QACF;QACA;QACAV,QAAQ,CAACH,iBAAiB,CAACO,OAAO,CAACG,IAAI,CAAC,CAAC;;QAEzC;QACAL,IAAI,EAAE;MACR,CAAC,MAAM;QACL;QACA;QACA;MACF;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd;MACA;MACA;IACF;EACF;AACF,CAAC;AAACT,EAAA,CA/BWD,aAAa;EAAA,QACTF,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}