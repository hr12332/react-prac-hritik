{"ast":null,"code":"var _s = $RefreshSig$();\nimport actions from \"./actions\";\nimport { DataService } from \"../../config/dataservice/Dataservice\";\nimport { API } from \"../../config/api\";\nimport { Alert } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nconst {\n  getRepositoryData\n} = actions;\nconst RepositoryFetcher = () => {\n  _s();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetchRepositories = async () => {\n      const perPage = 10; // Number of items per page\n      let page = 1; // Start from the first page\n\n      while (true) {\n        try {\n          const queryString = `?q=created:>2017-10-22&page=${page}`;\n          const getData = await DataService.get(API.repos.get + queryString);\n          if (!getData.data.error) {\n            if (getData.data.items.length === 0) {\n              // No more data, exit the loop\n              break;\n            }\n            // Dispatch the fetched data to your Redux store\n            dispatch(getRepositoryData(getData.data));\n\n            // Move to the next page\n            page++;\n          } else {\n            // Handle error, maybe dispatch an action to update the state with an error message\n            // <Alert severity=\"error\">{getData.data.message}</Alert>\n            break;\n          }\n        } catch (error) {\n          // Handle error, maybe dispatch an action to update the state with an error message\n          // <Alert severity=\"error\">{error.message}</Alert>\n          break;\n        }\n      }\n    };\n    fetchRepositories();\n  }, [dispatch]);\n  return null; // Return null or any other JSX if needed\n};\n_s(RepositoryFetcher, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c = RepositoryFetcher;\nexport default RepositoryFetcher;\nvar _c;\n$RefreshReg$(_c, \"RepositoryFetcher\");","map":{"version":3,"names":["actions","DataService","API","Alert","useDispatch","getRepositoryData","RepositoryFetcher","_s","dispatch","useEffect","fetchRepositories","perPage","page","queryString","getData","get","repos","data","error","items","length","_c","$RefreshReg$"],"sources":["D:/React-js-prac-Hritik/my-app/src/redux/repos/actioncCreator.js"],"sourcesContent":["import actions from \"./actions\";\r\nimport { DataService } from \"../../config/dataservice/Dataservice\";\r\nimport { API } from \"../../config/api\";\r\nimport { Alert } from \"@mui/material\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst {getRepositoryData}=actions;\r\nconst RepositoryFetcher = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const fetchRepositories = async () => {\r\n      const perPage = 10; // Number of items per page\r\n      let page = 1; // Start from the first page\r\n\r\n      while (true) {\r\n        try {\r\n          const queryString = `?q=created:>2017-10-22&page=${page}`;\r\n          const getData = await DataService.get(API.repos.get + queryString);\r\n\r\n          if (!getData.data.error) {\r\n            if (getData.data.items.length === 0) {\r\n              // No more data, exit the loop\r\n              break;\r\n            }\r\n            // Dispatch the fetched data to your Redux store\r\n            dispatch(getRepositoryData(getData.data));\r\n\r\n            // Move to the next page\r\n            page++;\r\n          } else {\r\n            // Handle error, maybe dispatch an action to update the state with an error message\r\n            // <Alert severity=\"error\">{getData.data.message}</Alert>\r\n            break;\r\n          }\r\n        } catch (error) {\r\n          // Handle error, maybe dispatch an action to update the state with an error message\r\n          // <Alert severity=\"error\">{error.message}</Alert>\r\n          break;\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchRepositories();\r\n  }, [dispatch]);\r\n\r\n  return null; // Return null or any other JSX if needed\r\n};\r\n\r\nexport default RepositoryFetcher;\r\n"],"mappings":";AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,WAAW,QAAQ,sCAAsC;AAClE,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,WAAW,QAAQ,aAAa;AAEzC,MAAM;EAACC;AAAiB,CAAC,GAACL,OAAO;AACjC,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9BK,SAAS,CAAC,MAAM;IACd,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;MACpB,IAAIC,IAAI,GAAG,CAAC,CAAC,CAAC;;MAEd,OAAO,IAAI,EAAE;QACX,IAAI;UACF,MAAMC,WAAW,GAAI,+BAA8BD,IAAK,EAAC;UACzD,MAAME,OAAO,GAAG,MAAMb,WAAW,CAACc,GAAG,CAACb,GAAG,CAACc,KAAK,CAACD,GAAG,GAAGF,WAAW,CAAC;UAElE,IAAI,CAACC,OAAO,CAACG,IAAI,CAACC,KAAK,EAAE;YACvB,IAAIJ,OAAO,CAACG,IAAI,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;cACnC;cACA;YACF;YACA;YACAZ,QAAQ,CAACH,iBAAiB,CAACS,OAAO,CAACG,IAAI,CAAC,CAAC;;YAEzC;YACAL,IAAI,EAAE;UACR,CAAC,MAAM;YACL;YACA;YACA;UACF;QACF,CAAC,CAAC,OAAOM,KAAK,EAAE;UACd;UACA;UACA;QACF;MACF;IACF,CAAC;IAEDR,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACD,EAAA,CAxCID,iBAAiB;EAAA,QACJF,WAAW;AAAA;AAAAiB,EAAA,GADxBf,iBAAiB;AA0CvB,eAAeA,iBAAiB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}